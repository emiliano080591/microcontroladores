
test-c-program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000034  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000153  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e7  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016f  00000000  00000000  000003fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  0000056c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d1  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000083  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	37 c0       	rjmp	.+110    	; 0x72 <__vector_1>
   4:	1a c0       	rjmp	.+52     	; 0x3a <__bad_interrupt>
   6:	19 c0       	rjmp	.+50     	; 0x3a <__bad_interrupt>
   8:	18 c0       	rjmp	.+48     	; 0x3a <__bad_interrupt>
   a:	17 c0       	rjmp	.+46     	; 0x3a <__bad_interrupt>
   c:	16 c0       	rjmp	.+44     	; 0x3a <__bad_interrupt>
   e:	15 c0       	rjmp	.+42     	; 0x3a <__bad_interrupt>
  10:	14 c0       	rjmp	.+40     	; 0x3a <__bad_interrupt>
  12:	13 c0       	rjmp	.+38     	; 0x3a <__bad_interrupt>
  14:	12 c0       	rjmp	.+36     	; 0x3a <__bad_interrupt>
  16:	11 c0       	rjmp	.+34     	; 0x3a <__bad_interrupt>
  18:	10 c0       	rjmp	.+32     	; 0x3a <__bad_interrupt>
  1a:	0f c0       	rjmp	.+30     	; 0x3a <__bad_interrupt>
  1c:	0e c0       	rjmp	.+28     	; 0x3a <__bad_interrupt>
  1e:	0d c0       	rjmp	.+26     	; 0x3a <__bad_interrupt>
  20:	0c c0       	rjmp	.+24     	; 0x3a <__bad_interrupt>
  22:	0b c0       	rjmp	.+22     	; 0x3a <__bad_interrupt>
  24:	0a c0       	rjmp	.+20     	; 0x3a <__bad_interrupt>
  26:	09 c0       	rjmp	.+18     	; 0x3a <__bad_interrupt>
  28:	08 c0       	rjmp	.+16     	; 0x3a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61
  36:	02 d0       	rcall	.+4      	; 0x3c <main>
  38:	6d c0       	rjmp	.+218    	; 0x114 <_exit>

0000003a <__bad_interrupt>:
  3a:	e2 cf       	rjmp	.-60     	; 0x0 <__vectors>

0000003c <main>:
void delay(int);

int main() {

// Configure PORTA as output
    DDRA = 0xFF;
  3c:	8f ef       	ldi	r24, 0xFF	; 255
  3e:	8a bb       	out	0x1a, r24	; 26
    PORTA = 0xFF;
  40:	8b bb       	out	0x1b, r24	; 27

GICR = (1<<INT0); // Enable INT0 External Interrupt
  42:	80 e4       	ldi	r24, 0x40	; 64
  44:	8b bf       	out	0x3b, r24	; 59

MCUCR = (1<<ISC01);     // Falling-Edge Triggered INT0
  46:	82 e0       	ldi	r24, 0x02	; 2
  48:	85 bf       	out	0x35, r24	; 53

sei(); // Enable Interrupts
  4a:	78 94       	sei
  4c:	ff cf       	rjmp	.-2      	; 0x4c <__SREG__+0xd>

0000004e <delay>:

}

void delay(int ms) {

ms /= 100;
  4e:	64 e6       	ldi	r22, 0x64	; 100
  50:	70 e0       	ldi	r23, 0x00	; 0
  52:	39 d0       	rcall	.+114    	; 0xc6 <__divmodhi4>
  54:	9b 01       	movw	r18, r22
  56:	40 e0       	ldi	r20, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  58:	68 ea       	ldi	r22, 0xA8	; 168
  5a:	71 e6       	ldi	r23, 0x61	; 97
  5c:	04 c0       	rjmp	.+8      	; 0x66 <delay+0x18>
  5e:	cb 01       	movw	r24, r22
  60:	01 97       	sbiw	r24, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <delay+0x12>

char i;

for(i = 0; i < ms; i++){
  64:	4f 5f       	subi	r20, 0xFF	; 255
  66:	84 2f       	mov	r24, r20
  68:	90 e0       	ldi	r25, 0x00	; 0
  6a:	82 17       	cp	r24, r18
  6c:	93 07       	cpc	r25, r19
  6e:	bc f3       	brlt	.-18     	; 0x5e <delay+0x10>

_delay_ms(100);      // max is 262.14 ms / F_CPU in MHz

}

}
  70:	08 95       	ret

00000072 <__vector_1>:

}

}

SIGNAL(SIG_INTERRUPT0) {
  72:	1f 92       	push	r1
  74:	0f 92       	push	r0
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	0f 92       	push	r0
  7a:	11 24       	eor	r1, r1
  7c:	2f 93       	push	r18
  7e:	3f 93       	push	r19
  80:	4f 93       	push	r20
  82:	5f 93       	push	r21
  84:	6f 93       	push	r22
  86:	7f 93       	push	r23
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	af 93       	push	r26
  8e:	bf 93       	push	r27
  90:	ef 93       	push	r30
  92:	ff 93       	push	r31

// SIG_INTERRUPT1 -> INT1 (PD3)

// While Button is pressed, LED is on

PORTA |= (1<<PA5);  
  94:	dd 9a       	sbi	0x1b, 5	; 27

delay(1000);
  96:	88 ee       	ldi	r24, 0xE8	; 232
  98:	93 e0       	ldi	r25, 0x03	; 3
  9a:	d9 df       	rcall	.-78     	; 0x4e <delay>

PORTA &= ~(1<<PA5);     // Put PortB bit 5 LOW
  9c:	dd 98       	cbi	0x1b, 5	; 27

delay(1000);
  9e:	88 ee       	ldi	r24, 0xE8	; 232
  a0:	93 e0       	ldi	r25, 0x03	; 3
  a2:	d5 df       	rcall	.-86     	; 0x4e <delay>

}
  a4:	ff 91       	pop	r31
  a6:	ef 91       	pop	r30
  a8:	bf 91       	pop	r27
  aa:	af 91       	pop	r26
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	7f 91       	pop	r23
  b2:	6f 91       	pop	r22
  b4:	5f 91       	pop	r21
  b6:	4f 91       	pop	r20
  b8:	3f 91       	pop	r19
  ba:	2f 91       	pop	r18
  bc:	0f 90       	pop	r0
  be:	0f be       	out	0x3f, r0	; 63
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <__divmodhi4>:
  c6:	97 fb       	bst	r25, 7
  c8:	09 2e       	mov	r0, r25
  ca:	07 26       	eor	r0, r23
  cc:	0a d0       	rcall	.+20     	; 0xe2 <__divmodhi4_neg1>
  ce:	77 fd       	sbrc	r23, 7
  d0:	04 d0       	rcall	.+8      	; 0xda <__divmodhi4_neg2>
  d2:	0c d0       	rcall	.+24     	; 0xec <__udivmodhi4>
  d4:	06 d0       	rcall	.+12     	; 0xe2 <__divmodhi4_neg1>
  d6:	00 20       	and	r0, r0
  d8:	1a f4       	brpl	.+6      	; 0xe0 <__divmodhi4_exit>

000000da <__divmodhi4_neg2>:
  da:	70 95       	com	r23
  dc:	61 95       	neg	r22
  de:	7f 4f       	sbci	r23, 0xFF	; 255

000000e0 <__divmodhi4_exit>:
  e0:	08 95       	ret

000000e2 <__divmodhi4_neg1>:
  e2:	f6 f7       	brtc	.-4      	; 0xe0 <__divmodhi4_exit>
  e4:	90 95       	com	r25
  e6:	81 95       	neg	r24
  e8:	9f 4f       	sbci	r25, 0xFF	; 255
  ea:	08 95       	ret

000000ec <__udivmodhi4>:
  ec:	aa 1b       	sub	r26, r26
  ee:	bb 1b       	sub	r27, r27
  f0:	51 e1       	ldi	r21, 0x11	; 17
  f2:	07 c0       	rjmp	.+14     	; 0x102 <__udivmodhi4_ep>

000000f4 <__udivmodhi4_loop>:
  f4:	aa 1f       	adc	r26, r26
  f6:	bb 1f       	adc	r27, r27
  f8:	a6 17       	cp	r26, r22
  fa:	b7 07       	cpc	r27, r23
  fc:	10 f0       	brcs	.+4      	; 0x102 <__udivmodhi4_ep>
  fe:	a6 1b       	sub	r26, r22
 100:	b7 0b       	sbc	r27, r23

00000102 <__udivmodhi4_ep>:
 102:	88 1f       	adc	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	5a 95       	dec	r21
 108:	a9 f7       	brne	.-22     	; 0xf4 <__udivmodhi4_loop>
 10a:	80 95       	com	r24
 10c:	90 95       	com	r25
 10e:	bc 01       	movw	r22, r24
 110:	cd 01       	movw	r24, r26
 112:	08 95       	ret

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
