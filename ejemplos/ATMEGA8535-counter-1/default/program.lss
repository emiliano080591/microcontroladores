
program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000000b6  0000012a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013e  00000000  00000000  00000177  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000eb  00000000  00000000  000002b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000014f  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000e3  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  000005f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  0000061b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	22 c0       	rjmp	.+68     	; 0x50 <__bad_interrupt>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>
  1e:	18 c0       	rjmp	.+48     	; 0x50 <__bad_interrupt>
  20:	17 c0       	rjmp	.+46     	; 0x50 <__bad_interrupt>
  22:	16 c0       	rjmp	.+44     	; 0x50 <__bad_interrupt>
  24:	15 c0       	rjmp	.+42     	; 0x50 <__bad_interrupt>
  26:	14 c0       	rjmp	.+40     	; 0x50 <__bad_interrupt>
  28:	13 c0       	rjmp	.+38     	; 0x50 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	e6 eb       	ldi	r30, 0xB6	; 182
  3e:	f0 e0       	ldi	r31, 0x00	; 0
  40:	02 c0       	rjmp	.+4      	; 0x46 <.do_copy_data_start>

00000042 <.do_copy_data_loop>:
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0

00000046 <.do_copy_data_start>:
  46:	a2 37       	cpi	r26, 0x72	; 114
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <.do_copy_data_loop>
  4c:	02 d0       	rcall	.+4      	; 0x52 <main>
  4e:	31 c0       	rjmp	.+98     	; 0xb2 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <main>:
#define F_CPU 1000000UL

#include <avr/io.h>
#include <util/delay.h>

int main(void){
  52:	1f 93       	push	r17
  54:	df 93       	push	r29
  56:	cf 93       	push	r28
  58:	cd b7       	in	r28, 0x3d	; 61
  5a:	de b7       	in	r29, 0x3e	; 62
  5c:	62 97       	sbiw	r28, 0x12	; 18
  5e:	0f b6       	in	r0, 0x3f	; 63
  60:	f8 94       	cli
  62:	de bf       	out	0x3e, r29	; 62
  64:	0f be       	out	0x3f, r0	; 63
  66:	cd bf       	out	0x3d, r28	; 61
	DDRA=0xFF; //Defino el Puerto D como salida
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	8a bb       	out	0x1a, r24	; 26

	int i;
	int cont[9]={0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F}; //Defino los numeros en Hexa del 0 a 9
  6c:	de 01       	movw	r26, r28
  6e:	11 96       	adiw	r26, 0x01	; 1
  70:	e0 e6       	ldi	r30, 0x60	; 96
  72:	f0 e0       	ldi	r31, 0x00	; 0
  74:	82 e1       	ldi	r24, 0x12	; 18
  76:	01 90       	ld	r0, Z+
  78:	0d 92       	st	X+, r0
  7a:	81 50       	subi	r24, 0x01	; 1
  7c:	e1 f7       	brne	.-8      	; 0x76 <main+0x24>
	while(1){ //Ciclo Infinito
		PORTA=0x3F; //Inicializo el Display en 0
  7e:	1f e3       	ldi	r17, 0x3F	; 63
  80:	be 01       	movw	r22, r28
  82:	6f 5f       	subi	r22, 0xFF	; 255
  84:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  86:	49 e1       	ldi	r20, 0x19	; 25
  88:	50 e0       	ldi	r21, 0x00	; 0
		for(i=0;i<=9;i++){ //Comienzo a cargar Numero por Numero en el Display
  8a:	9e 01       	movw	r18, r28
  8c:	2b 5e       	subi	r18, 0xEB	; 235
  8e:	3f 4f       	sbci	r19, 0xFF	; 255
	DDRA=0xFF; //Defino el Puerto D como salida

	int i;
	int cont[9]={0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F}; //Defino los numeros en Hexa del 0 a 9
	while(1){ //Ciclo Infinito
		PORTA=0x3F; //Inicializo el Display en 0
  90:	1b bb       	out	0x1b, r17	; 27
  92:	db 01       	movw	r26, r22
  94:	0b c0       	rjmp	.+22     	; 0xac <main+0x5a>
  96:	fa 01       	movw	r30, r20
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <main+0x46>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  9c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  9e:	d9 f7       	brne	.-10     	; 0x96 <main+0x44>
		for(i=0;i<=9;i++){ //Comienzo a cargar Numero por Numero en el Display
			_delay_ms(500);; //Espero 1 segundo para cargar el siguiente Numero
			PORTA=cont[i]; //Imprimo el Numero en el Puerto D
  a0:	8c 91       	ld	r24, X
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	12 96       	adiw	r26, 0x02	; 2

	int i;
	int cont[9]={0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x27,0x7F,0x6F}; //Defino los numeros en Hexa del 0 a 9
	while(1){ //Ciclo Infinito
		PORTA=0x3F; //Inicializo el Display en 0
		for(i=0;i<=9;i++){ //Comienzo a cargar Numero por Numero en el Display
  a6:	a2 17       	cp	r26, r18
  a8:	b3 07       	cpc	r27, r19
  aa:	91 f3       	breq	.-28     	; 0x90 <main+0x3e>
  ac:	88 e8       	ldi	r24, 0x88	; 136
  ae:	93 e1       	ldi	r25, 0x13	; 19
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x44>

000000b2 <_exit>:
  b2:	f8 94       	cli

000000b4 <__stop_program>:
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <__stop_program>
