
practica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000122  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000196  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000196  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001fd  00000000  00000000  000001d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000140  00000000  00000000  000003ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000257  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000102  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000050  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000008da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	1c c0       	rjmp	.+56     	; 0x4a <__bad_interrupt>
  12:	1b c0       	rjmp	.+54     	; 0x4a <__bad_interrupt>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	a6 36       	cpi	r26, 0x66	; 102
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	02 d0       	rcall	.+4      	; 0x4c <main>
  48:	6a c0       	rjmp	.+212    	; 0x11e <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <main>:
#include <avr/io.h>
#include <util/delay.h>
#include <stdio.h>

int main(void)
{
  4c:	cf 93       	push	r28
  4e:	df 93       	push	r29
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
  50:	1a ba       	out	0x1a, r1	; 26
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
  52:	1b ba       	out	0x1b, r1	; 27

// Port B initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
  54:	17 ba       	out	0x17, r1	; 23
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
  56:	18 ba       	out	0x18, r1	; 24

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
  58:	14 ba       	out	0x14, r1	; 20
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
  5a:	15 ba       	out	0x15, r1	; 21

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
  5c:	11 ba       	out	0x11, r1	; 17
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
  5e:	12 ba       	out	0x12, r1	; 18
// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
  60:	13 be       	out	0x33, r1	; 51
TCNT0=0x00;
  62:	12 be       	out	0x32, r1	; 50
OCR0=0x00;
  64:	1c be       	out	0x3c, r1	; 60
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
  66:	1f bc       	out	0x2f, r1	; 47
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
  68:	1e bc       	out	0x2e, r1	; 46
TCNT1H=0x00;
  6a:	1d bc       	out	0x2d, r1	; 45
TCNT1L=0x00;
  6c:	1c bc       	out	0x2c, r1	; 44
ICR1H=0x00;
  6e:	17 bc       	out	0x27, r1	; 39
ICR1L=0x00;
  70:	16 bc       	out	0x26, r1	; 38
OCR1AH=0x00;
  72:	1b bc       	out	0x2b, r1	; 43
OCR1AL=0x00;
  74:	1a bc       	out	0x2a, r1	; 42
OCR1BH=0x00;
  76:	19 bc       	out	0x29, r1	; 41
OCR1BL=0x00;
  78:	18 bc       	out	0x28, r1	; 40
// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
  7a:	12 bc       	out	0x22, r1	; 34
TCCR2=(0<<WGM20) | (0<<COM21) | (0<<COM20) | (0<<WGM21) | (0<<CS22) | (0<<CS21) | (0<<CS20);
  7c:	15 bc       	out	0x25, r1	; 37
TCNT2=0x00;
  7e:	14 bc       	out	0x24, r1	; 36
OCR2=0x00;
  80:	13 bc       	out	0x23, r1	; 35

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
  82:	19 be       	out	0x39, r1	; 57

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
  84:	15 be       	out	0x35, r1	; 53
MCUCSR=(0<<ISC2);
  86:	14 be       	out	0x34, r1	; 52
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 9600
UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<U2X) | (0<<MPCM);
  88:	1b b8       	out	0x0b, r1	; 11
UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
  8e:	86 e8       	ldi	r24, 0x86	; 134
  90:	80 bd       	out	0x20, r24	; 32
UBRRH=0x00;
  92:	10 bc       	out	0x20, r1	; 32
UBRRL=0x47;
  94:	87 e4       	ldi	r24, 0x47	; 71
  96:	89 b9       	out	0x09, r24	; 9
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	88 b9       	out	0x08, r24	; 8
SFIOR=(0<<ACME);
  9c:	10 be       	out	0x30, r1	; 48

// ADC initialization
// ADC disabled
ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
  9e:	16 b8       	out	0x06, r1	; 6

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
  a0:	1d b8       	out	0x0d, r1	; 13

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
  a2:	16 be       	out	0x36, r1	; 54
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	c4 e6       	ldi	r28, 0x64	; 100
  a6:	d0 e0       	ldi	r29, 0x00	; 0

while (1)
      {
      // Place your code here
       putchar('M');
  a8:	60 91 62 00 	lds	r22, 0x0062
  ac:	70 91 63 00 	lds	r23, 0x0063
  b0:	8d e4       	ldi	r24, 0x4D	; 77
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 d0       	rcall	.+16     	; 0xc6 <fputc>
  b6:	88 e8       	ldi	r24, 0x88	; 136
  b8:	93 e1       	ldi	r25, 0x13	; 19
  ba:	fe 01       	movw	r30, r28
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x70>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <main+0x6e>
  c4:	f1 cf       	rjmp	.-30     	; 0xa8 <main+0x5c>

000000c6 <fputc>:
  c6:	0f 93       	push	r16
  c8:	1f 93       	push	r17
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	8c 01       	movw	r16, r24
  d0:	eb 01       	movw	r28, r22
  d2:	8b 81       	ldd	r24, Y+3	; 0x03
  d4:	81 ff       	sbrs	r24, 1
  d6:	1b c0       	rjmp	.+54     	; 0x10e <fputc+0x48>
  d8:	82 ff       	sbrs	r24, 2
  da:	0d c0       	rjmp	.+26     	; 0xf6 <fputc+0x30>
  dc:	2e 81       	ldd	r18, Y+6	; 0x06
  de:	3f 81       	ldd	r19, Y+7	; 0x07
  e0:	8c 81       	ldd	r24, Y+4	; 0x04
  e2:	9d 81       	ldd	r25, Y+5	; 0x05
  e4:	28 17       	cp	r18, r24
  e6:	39 07       	cpc	r19, r25
  e8:	64 f4       	brge	.+24     	; 0x102 <fputc+0x3c>
  ea:	e8 81       	ld	r30, Y
  ec:	f9 81       	ldd	r31, Y+1	; 0x01
  ee:	01 93       	st	Z+, r16
  f0:	f9 83       	std	Y+1, r31	; 0x01
  f2:	e8 83       	st	Y, r30
  f4:	06 c0       	rjmp	.+12     	; 0x102 <fputc+0x3c>
  f6:	e8 85       	ldd	r30, Y+8	; 0x08
  f8:	f9 85       	ldd	r31, Y+9	; 0x09
  fa:	80 2f       	mov	r24, r16
  fc:	09 95       	icall
  fe:	89 2b       	or	r24, r25
 100:	31 f4       	brne	.+12     	; 0x10e <fputc+0x48>
 102:	8e 81       	ldd	r24, Y+6	; 0x06
 104:	9f 81       	ldd	r25, Y+7	; 0x07
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	9f 83       	std	Y+7, r25	; 0x07
 10a:	8e 83       	std	Y+6, r24	; 0x06
 10c:	02 c0       	rjmp	.+4      	; 0x112 <fputc+0x4c>
 10e:	0f ef       	ldi	r16, 0xFF	; 255
 110:	1f ef       	ldi	r17, 0xFF	; 255
 112:	c8 01       	movw	r24, r16
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	08 95       	ret

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
