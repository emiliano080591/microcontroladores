
practica.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000068  00800060  000000ea  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000c8  008000c8  000001e6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000007c  00000000  00000000  00000206  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002dc  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000129  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000154  00000000  00000000  00000687  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000020  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000145  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000028  00000000  00000000  00000941  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ea ee       	ldi	r30, 0xEA	; 234
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	02 c0       	rjmp	.+4      	; 0x3e <.do_copy_data_start>

0000003a <.do_copy_data_loop>:
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0

0000003e <.do_copy_data_start>:
  3e:	a8 3c       	cpi	r26, 0xC8	; 200
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <.do_copy_data_loop>

00000044 <__do_clear_bss>:
  44:	10 e0       	ldi	r17, 0x00	; 0
  46:	a8 ec       	ldi	r26, 0xC8	; 200
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	af 3c       	cpi	r26, 0xCF	; 207
  50:	b1 07       	cpc	r27, r17
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	02 d0       	rcall	.+4      	; 0x5a <main>
  56:	47 c0       	rjmp	.+142    	; 0xe6 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
  0x79,
  0x71
};
unsigned char aux1 = 0, aux2 = 0, aux3 = 0, aux4 = 0;

int main(void) {
  5a:	ef 92       	push	r14
  5c:	ff 92       	push	r15
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	df 93       	push	r29
  64:	cf 93       	push	r28
  66:	cd b7       	in	r28, 0x3d	; 61
  68:	de b7       	in	r29, 0x3e	; 62
  6a:	28 97       	sbiw	r28, 0x08	; 8
  6c:	0f b6       	in	r0, 0x3f	; 63
  6e:	f8 94       	cli
  70:	de bf       	out	0x3e, r29	; 62
  72:	0f be       	out	0x3f, r0	; 63
  74:	cd bf       	out	0x3d, r28	; 61
  //INICIALIZAMOS LOS PUERTOS COMO SALIDAS
  DDRA = 0xFF;
  76:	8f ef       	ldi	r24, 0xFF	; 255
  78:	8a bb       	out	0x1a, r24	; 26
  DDRC = 0xFF;
  7a:	84 bb       	out	0x14, r24	; 20
    8,
    16,
    32,
    64,
    128
  }; //valores de pines del  PORTC
  7c:	de 01       	movw	r26, r28
  7e:	11 96       	adiw	r26, 0x01	; 1
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	88 e0       	ldi	r24, 0x08	; 8
  86:	01 90       	ld	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	81 50       	subi	r24, 0x01	; 1
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x2c>
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	50 e0       	ldi	r21, 0x00	; 0
  }; ///el orden de como se ejecutara cada linea de arreglos

  while (1) {
    for (int m = 0; m < sizeof LET; m++) {

      for (int n = 0; n < 100; n++) //EJECUTAR 200 VECES
  92:	7e 01       	movw	r14, r28
  94:	08 94       	sec
  96:	e1 1c       	adc	r14, r1
  98:	f1 1c       	adc	r15, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	04 ef       	ldi	r16, 0xF4	; 244
  9c:	11 e0       	ldi	r17, 0x01	; 1
      {
        for (int j = 0; j < 8; j++) {
  9e:	be 01       	movw	r22, r28
  a0:	67 5f       	subi	r22, 0xF7	; 247
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	17 c0       	rjmp	.+46     	; 0xd4 <main+0x7a>
          PORTA = PORT[j]; // FILA
  a6:	8d 91       	ld	r24, X+
  a8:	8b bb       	out	0x1b, r24	; 27
          PORTC = ~LETRAS[3][j]; //MOSTRAR LA MITAD DEL CARACTER  (COLUMNA)
  aa:	80 81       	ld	r24, Z
  ac:	80 95       	com	r24
  ae:	85 bb       	out	0x15, r24	; 21
  b0:	c8 01       	movw	r24, r16
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x58>
  b6:	32 96       	adiw	r30, 0x02	; 2
  while (1) {
    for (int m = 0; m < sizeof LET; m++) {

      for (int n = 0; n < 100; n++) //EJECUTAR 200 VECES
      {
        for (int j = 0; j < 8; j++) {
  b8:	a6 17       	cp	r26, r22
  ba:	b7 07       	cpc	r27, r23
  bc:	a1 f7       	brne	.-24     	; 0xa6 <main+0x4c>
  }; ///el orden de como se ejecutara cada linea de arreglos

  while (1) {
    for (int m = 0; m < sizeof LET; m++) {

      for (int n = 0; n < 100; n++) //EJECUTAR 200 VECES
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	24 36       	cpi	r18, 0x64	; 100
  c4:	31 05       	cpc	r19, r1
  c6:	21 f0       	breq	.+8      	; 0xd0 <main+0x76>
  c8:	d7 01       	movw	r26, r14
  ca:	e0 ea       	ldi	r30, 0xA0	; 160
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	eb cf       	rjmp	.-42     	; 0xa6 <main+0x4c>
    3,
    4
  }; ///el orden de como se ejecutara cada linea de arreglos

  while (1) {
    for (int m = 0; m < sizeof LET; m++) {
  d0:	4f 5f       	subi	r20, 0xFF	; 255
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
  d4:	45 30       	cpi	r20, 0x05	; 5
  d6:	51 05       	cpc	r21, r1
  d8:	18 f0       	brcs	.+6      	; 0xe0 <main+0x86>
  da:	40 e0       	ldi	r20, 0x00	; 0
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	fa cf       	rjmp	.-12     	; 0xd4 <main+0x7a>
  e0:	20 e0       	ldi	r18, 0x00	; 0
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	f1 cf       	rjmp	.-30     	; 0xc8 <main+0x6e>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
